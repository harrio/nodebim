doctype html
html
  head
    title= title
    meta(charset="utf-8")
    meta(name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0, shrink-to-fit=no")
    meta(name="mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-capable" content="yes")
    meta(name="apple-mobile-web-app-status-bar-style" content="black-translucent")
    link(href='https://fonts.googleapis.com/css?family=Roboto', rel='stylesheet')
    link(rel='stylesheet', href='/stylesheets/style.css')

    script(src="three/build/three.min.js")
    
    script(src="javascripts/TrackballControls.js")
    script(src="javascripts/glTF-parser.js")
    script(src="javascripts/glTFLoader.js")
    script(src="javascripts/glTFLoaderUtils.js")
    script(src="javascripts/glTFAnimation.js")
    script(src="javascripts/glTFShaders.js")
    script(src="javascripts/WebVR.js")
    script(src="javascripts/VREffect.js")
    script(src="javascripts/VRControls.js")
    script(src="webvr-boilerplate/build/webvr-manager.js")
    script(src="webvr-boilerplate/node_modules/webvr-polyfill/build/webvr-polyfill.js")
    script(src="javascripts/main.js")

    script(type="x-shader/x-vertex" id="vertexShader").
      varying vec3 vWorldPosition;
      void main() {
        vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
        vWorldPosition = worldPosition.xyz;
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
      }

    script(type="x-shader/x-fragment" id="fragmentShader").
      uniform vec3 topColor;
      uniform vec3 bottomColor;
      uniform float offset;
      uniform float exponent;
      varying vec3 vWorldPosition;
      void main() {
        float h = normalize( vWorldPosition + offset ).y;
        gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max( h , 0.0), exponent ), 0.0 ) ), 1.0 );
      }

  body
    block content
